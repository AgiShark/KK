<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="addMode" xml:space="preserve">
    <value>增加模式</value>
  </data>
  <data name="clearAccWord" xml:space="preserve">
    <value>清空飾品</value>
  </data>
  <data name="ClothesKind_accessories" xml:space="preserve">
    <value>飾品</value>
  </data>
  <data name="ClothesKind_bot" xml:space="preserve">
    <value>下裝</value>
  </data>
  <data name="ClothesKind_bra" xml:space="preserve">
    <value>胸罩</value>
  </data>
  <data name="ClothesKind_gloves" xml:space="preserve">
    <value>手套</value>
  </data>
  <data name="ClothesKind_panst" xml:space="preserve">
    <value>褲襪</value>
  </data>
  <data name="ClothesKind_shoes_inner" xml:space="preserve">
    <value>室內鞋</value>
  </data>
  <data name="ClothesKind_shoes_outer" xml:space="preserve">
    <value>室外鞋</value>
  </data>
  <data name="ClothesKind_shorts" xml:space="preserve">
    <value>內褲</value>
  </data>
  <data name="ClothesKind_socks" xml:space="preserve">
    <value>襪子</value>
  </data>
  <data name="ClothesKind_top" xml:space="preserve">
    <value>上衣</value>
  </data>
  <data name="empty" xml:space="preserve">
    <value>空</value>
  </data>
  <data name="lockHairAcc" xml:space="preserve">
    <value>鎖定頭髮飾品</value>
  </data>
  <data name="replaceMode" xml:space="preserve">
    <value>取代模式</value>
  </data>
  <data name="unreconized" xml:space="preserve">
    <value>未識別</value>
  </data>
  <data name="reverseHairAcc" xml:space="preserve">
    <value>反選頭髮飾品</value>
  </data>
  <data name="charaOverlay" xml:space="preserve">
    <value>角色 Overlay</value>
  </data>
  <data name="irisOverlay" xml:space="preserve">
    <value>虹膜 Overlay</value>
  </data>
  <data name="faceOverlay" xml:space="preserve">
    <value>臉部 Overlay</value>
  </data>
  <data name="bodyOverlay" xml:space="preserve">
    <value>身體 Overlay</value>
  </data>
  <data name="readABMX" xml:space="preserve">
    <value>ABMX</value>
  </data>
  <data name="showSelection" xml:space="preserve">
    <value>顯示選擇項</value>
  </data>
  <data name="makerWarning" xml:space="preserve">
    <value>在Maker中換衣服時，你可能會在此遇到錯誤。
換衣服的實作是先讀衣裝存檔到假人身上，再把需要的部份扒過來。
而KKSAPI設計考量為「在Maker中只會載入一個角色」，這導致依賴於KKSAPI的插件無法成功初始化假人。
如果你碰到問題請試著安裝IllusionFixes.NullChecks，它可以簡單的繞過問題。因為假人不使用到其它未支援的插件資料，它們的初始化失敗並不影響到換衣成果。</value>
  </data>
</root>