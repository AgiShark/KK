@page "/"
@using System.IO;
@using Microsoft.Extensions.Logging
@using Token = KK_SaveLoadCompression.SaveLoadCompression.Token;
@inject ILogger<Index> logger;
@inject KK_SaveLoadCompression.SaveLoadCompression slc;

<InputFile OnChange="@OnSelectedFile"></InputFile>
<br />

@if (null != buffer && buffer.Length > 0) {
    <img src="data:image;base64,@System.Convert.ToBase64String(buffer)" />
    <p>
        @*Compression finish in {Time.time - startTime:n2} seconds<br />*@
        Size compress from @inputFileSize bytes to @buffer.Length bytes<br />
        Compress ratio: @($"{Convert.ToDecimal(inputFileSize) / buffer.Length:n3}")/1, which means it is now @($"{Convert.ToDecimal(buffer.Length) / inputFileSize:p3}") big.
    </p>
}

@code{
    private byte[] buffer = { };
    private long inputFileSize = 0;

    public Index() {
        Extension.Logger.logger = logger;
    }

    private async void OnSelectedFile(InputFileChangeEventArgs e) {
        logger.LogDebug(e.File.Name);
        long newSize;
        using (MemoryStream inputStream = new MemoryStream())
        using (MemoryStream writeStream = new MemoryStream()) {
            await e.File.OpenReadStream().CopyToAsync(inputStream);
            inputFileSize = inputStream.Length;
            logger.LogDebug("Input file length:" + inputStream.Length);

            inputStream.Seek(0, SeekOrigin.Begin);
            newSize = slc.Save(inputStream, writeStream, Token.CoordinateToken);
            buffer = writeStream.ToArray();

            logger.LogDebug("Output file length:" + buffer.Length);
            base.StateHasChanged();
        }
    }
}

